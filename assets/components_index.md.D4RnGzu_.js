import{_ as a,c as t,o as r,a2 as o}from"./chunks/framework.DNzwJ2JK.js";const m=JSON.parse('{"title":"介绍","description":"","frontmatter":{},"headers":[],"relativePath":"components/index.md","filePath":"components/index.md"}'),n={name:"components/index.md"};function i(l,e,c,s,p,d){return r(),t("div",null,e[0]||(e[0]=[o('<h1 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h1><p>框架提供一系列的组件方便快速开发。</p><h2 id="基础组件" tabindex="-1">基础组件 <a class="header-anchor" href="#基础组件" aria-label="Permalink to &quot;基础组件&quot;">​</a></h2><p>基础组件由 <a href="https://vant-ui.github.io/vant" target="_blank" rel="noreferrer">Vant</a> 提供。</p><div class="warning custom-block"><p class="custom-block-title">替换组件库</p><p>如果你不喜欢 Vant ，或者你想要将老项目迁移到 Fantastic-mobile 上，但老项目里使用的组件库并不是 Vant ，框架也提供了组件库替换移方案：</p><ul><li>《<a href="/v0-docs/guide/replace-to-varlet.html">替换为 Varlet</a>》</li><li>《<a href="/v0-docs/guide/replace-to-nut.html">替换为 NutUI</a>》</li></ul><p>如果你想使用的组件库不在上述方案中，可以通过参考任何一份方案，理解替换的整理思路，并自行替换，别担心会很复杂，我们已经将大部分工作做好了。</p></div><h2 id="内建组件" tabindex="-1">内建组件 <a class="header-anchor" href="#内建组件" aria-label="Permalink to &quot;内建组件&quot;">​</a></h2><p>为了实现 UI 组件库可替换，框架内建了一些组件，这些组件仅服务于框架自身，所以不建议在业务页面内使用。但如果你需要对框架进行二次开发，并保证视觉上的一致性，这时候你就会需要用到它们。</p><p>内建组件存放在 <code>/src/ui-kit/</code> 目录下，并配置了使用时自动引入。</p><p>你也可以点击 <a href="https://fantastic-mobile.hurui.me/basic-example/#/component/built-in" target="_blank" rel="noreferrer">基础版</a> 或 <a href="https://fantastic-mobile.hurui.me/pro-example/#/component/built-in" target="_blank" rel="noreferrer">专业版</a> 查看内建组件示例页面。</p><h2 id="扩展组件" tabindex="-1">扩展组件 <a class="header-anchor" href="#扩展组件" aria-label="Permalink to &quot;扩展组件&quot;">​</a></h2><p>扩展组件为框架封装的组件，组件源码完全开放，如果觉得用着不顺手，可以到 <code>/src/components/</code> 目录下找到对应组件自行修改。</p>',11)]))}const u=a(n,[["render",i]]);export{m as __pageData,u as default};
